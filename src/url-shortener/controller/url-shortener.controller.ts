import { Body, Controller, Get, HttpCode, HttpStatus, Logger, Param, Post, Res, UseFilters } from "@nestjs/common";
import { ApiExtraModels, ApiParam, ApiResponse, ApiTags } from "@nestjs/swagger";
import { ShortenRequestDto } from "../dto/shorten-request.dto";
import { ShortenResponseDto } from "../dto/shorten-response.dto";
import { EntityNotFoundFilter } from "../exception-filter/not-found-exception.filter";
import { IUrlShortenerService } from "../service/url-shortener.service";

@Controller()
@ApiTags('Url Shortener')
@ApiExtraModels(ShortenResponseDto)
export class UrlShortenerController {
    private readonly logger = new Logger(UrlShortenerController.name);

    constructor(private service: IUrlShortenerService){}
    
    @Post('/encurtador')
    @HttpCode(HttpStatus.CREATED)
    @ApiResponse({ status: HttpStatus.CREATED, description: 'The url has been successfully shortened'})
    async shorten(@Body() request: ShortenRequestDto): Promise<ShortenResponseDto> {
        this.logger.log("Request to shorten the url: " + request.url)
        const newUrl = await this.service.shorten(request.url);
        return new ShortenResponseDto(newUrl);
    }

    @Get('/:code')
    @UseFilters(EntityNotFoundFilter)
    @ApiParam({name: "code", description: "The code generated by the shortening process", example: "uv4cjeo"})
    @ApiResponse({ status: HttpStatus.FOUND, description: 'The url has been successfully redirected'})
    @ApiResponse({ status: HttpStatus.NOT_FOUND, description: 'The code entered was not found'})
    async redirect(@Res() res: any, @Param('code') code: string): Promise<void> {
        this.logger.log("Request to redirect url with code: " + code)
        await this.service.getRedirecUrl(code)
            .then((redirectUrl: string) => res.redirect(302, redirectUrl));
    }
}
