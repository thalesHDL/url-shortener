version: 2.1
orbs:
  heroku: circleci/heroku@1.0.1
workflows:
  heroku_deploy:
    jobs:
      - heroku/deploy-via-git




# jobs:
#   build:
#     docker:
#       - image: circleci/cci-demo-docker-primary:0.0.2
#       - image: postgres:9.4.1
#         environment:
#           POSTGRES_USER: ubuntu
#           POSTGRES_DB: contacts
#     working_directory: /go/src/github.com/circleci/cci-demo-docker

#     environment:
#       TEST_RESULTS: /tmp/test-results

#     steps:
#       - checkout

#       - run:
#           name: Waiting for Postgres to be ready
#           command: |
#             for i in `seq 1 10`;
#             do
#               nc -z localhost 5432 && echo Success && exit 0
#               echo -n .
#               sleep 1
#             done
#             echo Failed waiting for Postgress && exit 1
#       - run: mkdir -p $TEST_RESULTS

#       - run:
#           name: Start container and verify it's working
#           command: |
#             set -x
#             docker-compose up -d
#             # docker-compose will start 2 containers, the one with service will be named `contacts`
#             # we start another container with curl in the same network as `contacts`, this way we have
#             # all exposed ports from `contacts` available on `localhost` in this new container
#             docker run --network container:contacts \
#               appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test
#       - deploy:
#           name: Build and push Docker image
#           command: |
#             TAG="0.1.${CIRCLE_BUILD_NUM}"
#             docker build -t circleci/cci-demo-docker:$TAG .
#             docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#             docker push circleci/cci-demo-docker:$TAG
#       - store_artifacts:
#           path: /tmp/test-results
#           destination: raw-test-output

#       - store_test_results:
#           path: /tmp/test-results